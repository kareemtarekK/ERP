// handle malformed jwt
const handleMalFormedJwt = (err, res) => {
  return res.status(err.statusCode).json({
    status: err.status,
    message: "Invalied token, please login again",
  });
};
//handle expires token
const handleExpiredError = (err, res) => {
  return res.status(err.statusCode).json({
    status: err.status,
    message: "Your token has expired, please login again",
  });
};
// handle duplicate error
const handleDuplicationError = (err, res) => {
  const regex = /dup key:\s*\{\s*([^:]+):\s*"([^"]+)"\s*\}/;
  const match = err.errorResponse.errmsg.match(regex)[0].split("{ ")[1];
  const message = `Duplicate { ${match}, please use another value`;
  return res.status(err.statusCode).json({
    status: err.status,
    message,
  });
};
// handle validation error
const handleValidationError = (err, res) => {
  const messages = Object.values(err.errors)
    .map((el) => el.message)
    .join(", ");
  return res.status(err.statusCode).json({
    status: err.status,
    message: messages,
  });
};
// send error response for development
const sendErrorDev = (err, res) => {
  return res.status(err.statusCode).json({
    err,
    status: err.status,
    message: err.message,
    stack: err.stack,
  });
};
const sendErrorProd = (err, res) => {
  // ckeck if error is operational error or not
  if (err.isOperational) {
    return res.status(err.statusCode).json({
      status: err.status,
      message: err.message,
    });
  }
  // handle duplicate error
  else if (err.code === 11000) handleDuplicationError(err, res);
  // handle validation error
  else if (err.name === "ValidationError") handleValidationError(err, res);
  // handle expiration error
  else if (err.name === "TokenExpiredError") handleExpiredError(err, res);
  // handle malformed jwt
  else if (err.name === "JsonWebTokenError") handleMalFormedJwt(err, res);
  // genrate genric message
  else {
    return res.status(500).json({
      status: "error",
      message: "Something went wrong",
    });
  }
};
// gloabal error handling middleware
const globalErrorHandling = (err, req, res, next) => {
  err.status = err.status || "error";
  err.statusCode = err.statusCode || 500;
  if (process.env.NODE_ENV === "development") {
    return sendErrorDev(err, res);
  }
  if (process.env.NODE_ENV === "production") {
    return sendErrorProd(err, res);
  }
};
module.exports = globalErrorHandling;
